{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","StyledCard","alt","src","monster","id","name","email","styled","div","CardList","StyledCardList","monsters","map","Search","placeholderText","handleChange","StyledSearchBox","type","placeholder","onChange","input","App","e","setState","searchField","target","value","state","fetch","mode","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","StyledApp","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAGaA,EAAO,SAACC,GACnB,OACE,eAACC,EAAD,WACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YAIlBN,EAAaO,IAAOC,IAAV,0XCZHC,EAAW,SAACV,GACvB,OACE,cAACW,EAAD,UACGX,EAAMY,SAASC,KAAI,SAACT,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UAKrBM,EAAiBH,IAAOC,IAAV,+ICTPK,EAAS,SAACd,GAAW,IACxBe,EAAkCf,EAAlCe,gBAAiBC,EAAiBhB,EAAjBgB,aACzB,OACE,cAACC,EAAD,CACEC,KAAK,SACLC,YAAaJ,EACbK,SAAUJ,KAKVC,EAAkBT,IAAOa,MAAV,6KCRfC,E,kDACJ,aAAe,IAAD,8BACZ,gBAuBFN,aAAe,SAACO,GAId,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA1BtC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IAJH,E,qDAcd,WAAqB,IAAD,OAClBI,MAAM,6CAA8C,CAAEC,KAAM,SACzDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEZ,SAAUsB,S,oBAc/C,WAAU,IAAD,SAC2BC,KAAKP,MAA/BH,EADD,EACCA,YACFW,EAFC,EACcxB,SACayB,QAAO,SAACjC,GAAD,OACvCA,EAAQE,KAAKgC,cAAcC,SAASd,EAAYa,kBAGlD,OACE,eAACE,EAAD,WACE,kDACA,cAAC,EAAD,CACEzB,gBAAgB,kBAChBC,aAAc,SAACO,GAAD,OAAO,EAAKP,aAAaO,MAEzC,cAAC,EAAD,CAAUX,SAAUwB,W,GA7CVK,aAmDZD,EAAYhC,IAAOC,IAAV,6QAcAa,IC3DAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34a5e440.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Card = (props) => {\n  return (\n    <StyledCard>\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </StyledCard>\n  );\n};\nconst StyledCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #95dada;\n  border: 1px solid grey;\n  border-radius: 5px;\n  padding: 25px;\n  cursor: pointer;\n  -moz-osx-font-smoothing: grayscale;\n  backface-visibility: hidden;\n  transform: translate(0);\n  transition: transform 0.25s ease-out;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport styled from \"styled-components\";\nexport const CardList = (props) => {\n  return (\n    <StyledCardList>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </StyledCardList>\n  );\n};\nconst StyledCardList = styled.div`\n  width: 85vw;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 20px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Search = (props) => {\n  const { placeholderText, handleChange } = props;\n  return (\n    <StyledSearchBox\n      type=\"search\"\n      placeholder={placeholderText}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst StyledSearchBox = styled.input`\n  padding: 10px;\n  -webkit-appearance: none;\n  border: none;\n  outline: none;\n  line-height: 30px;\n  width: 150px;\n  margin-bottom: 30px;\n`;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Search } from \"./components/search/search.component\";\nimport styled from \"styled-components\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n    // make sure it can handle this.setState\n    // bind => method on any fn that returns a new fn\n    //         where the context of \"this\" is whatever we pass to it\n    // ----> binds \"this\" to our App component\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\", { mode: \"cors\" })\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  // handleChange(event) {\n  //   this.setState({ searchField: event.target.value });\n  // }\n\n  handleChange = (e) => {\n    // arrow function automatically binds \"this\" to where the arrow fn was defined in the first place\n    // in this case, the context of this fn is the App component\n    // LEXICAL SCOPING (don't need to call .bind() on these)\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { searchField, monsters } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <StyledApp>\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholderText=\"search monsters\"\n          handleChange={(e) => this.handleChange(e)}\n        />\n        <CardList monsters={filteredMonsters} />\n      </StyledApp>\n    );\n  }\n}\n\nconst StyledApp = styled.div`\n  text-align: center;\n  h1 {\n    margin: 0;\n    font-family: \"Bigelow Rules\";\n    font-size: 72px;\n    color: #0ccac4;\n  }\n  background: linear-gradient(\n    to left,\n    rgba(7, 27, 82, 1) 0%,\n    rgba(0, 128, 128, 1) 100%\n  );\n`;\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}